工作区   --->   暂存区  --->   远程库
git clone url(已经连接远程仓库)
cd fileName
git remote(展示远程仓库名字)
git remote -v(展示远程仓库详细信息)
git remote show origin(origin远程仓库名字)（更加详细展示远程仓库的信息）
git diff(展示已改动的文件)
修改文件
git add .
git commit -m ''
git push origin master


显示当前路径
pwd

删除文件
git rm xx.txt (本地仓库的文件删掉了, 远程仓库没有)
git commit -m 'remove xx.txt'
git push
git revert SHA (撤销之前的push, 本地又有xx.txt文件)(该操作很危险)

本地添加文件
git add xx.txt

更改上一个commit
git commit -m 'add 更改上一个commit'
git commit --amend -m '添加更改上一个commit'

撤销本地修改
git diff
先打开对于文件夹
cd modify
git checkout -- '1.txt'
git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令;
命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；（git add）
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。(git commit -m)


本地还原到某一次commit
git log
git reset --hard asdfadfadfadf(本地还原，实际是还原了但是没有提交的)
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区
用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
操作：
git reset --hard sdfadf（只有本地还原）
git push -f （远程仓库回退到指定的版本，历史记录回退到之前的，未来的没有了）
如果git push -f 报错或失败，就git config receive.denyNonFastForwards false


git add .
git commit -m ''
git push
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改


git status
查看文件状态
git checkout -- xx.txt (撤销文件修改)
git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别


rm xxx.txt
git checkout -- xxx.txt (删除文件又一键还原)

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

版本回退
git reset --hard HEAD^
在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
git reset --hard 1094a
版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

连接远程仓库
git remote add origin git@github.com:michaelliao/learngit.git
把上面的michaelliao替换成你自己的GitHub账户名
origin 是远程仓库名字  master是本地仓库


设置ssh
git remote add origin git@github.com:michaelliao/learngit.git
git push -u origin master
我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来


git checkout -b dev(git checkout命令加上-b参数表示创建并切换)
创建dev分支，然后切换到dev分支
相当于以下两条命令:
$ git branch dev
$ git checkout dev
git branch命令查看当前分支
git branch命令会列出所有分支，当前分支前面会标一个*号。
修改文件
再git add xx.txt
git commit -m 'sdfs'
如果没有push,远程仓库没有分支，现在分支只是在本地暂存区
git checkout master 切回原来的分支
git merge dev（git merge命令用于合并指定分支到当前分支）
git branch -d dev(删除dev分支)















